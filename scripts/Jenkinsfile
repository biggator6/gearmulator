pipeline {
	agent { label "${params.AgentLabel}" }
	
	environment {
		GIT_URL = credentials('dsp56300_gitUrl')
		CMAKE_BUILD_DIR = 'temp/cmake_jenkins'
	}
	parameters
	{
		string(name: 'Branch', defaultValue: "master", description: '')
		string(name: 'AgentLabel', defaultValue: "git && cmake", description: '')
		booleanParam(name: 'FXPlugins', defaultValue: false, description: '') 
		booleanParam(name: 'Deploy', defaultValue: true, description: '') 
		booleanParam(name: 'IntegrationTests', defaultValue: true, description: '')
		booleanParam(name: 'Upload', defaultValue: false, description: '') 
		string(name: 'UploadFolder', defaultValue: "", description: '')
		booleanParam(name: 'SynthOsirus', defaultValue: true, description: '')
		booleanParam(name: 'SynthOsTIrus', defaultValue: true, description: '')
		booleanParam(name: 'SynthVavra', defaultValue: true, description: '')
		booleanParam(name: 'SynthXenia', defaultValue: false, description: '')
		booleanParam(name: 'SynthNodalRed2x', defaultValue: false, description: '')
	}
	stages {
		stage("Checkout") {
			steps {
				script {
					currentBuild.displayName += " - ${params.AgentLabel} - ${params.Branch}"
					currentBuild.description = "Integration Tests: ${params.IntegrationTests}\nDeploy: ${params.Deploy}\nUpload: ${params.Upload}"

					if(params.FXPlugins)				currentBuild.displayName += " FX"
					if(params.Deploy)					currentBuild.displayName += " d"
					if(params.IntegrationTests)			currentBuild.displayName += " i"
					if(params.Upload)					currentBuild.displayName += " u"
					if(params.SynthOsirus)			    currentBuild.displayName += " Sabc"
					if(params.SynthOsTIrus)			    currentBuild.displayName += " Sti"
					if(params.SynthVavra)			    currentBuild.displayName += " SmQ"
					if(params.SynthXenia)			    currentBuild.displayName += " Sxt"
					if(params.SynthNodalRed2x)			currentBuild.displayName += " Sn2x"
				}
				doCheckout()
			}
		}
		stage('Compile') {
			steps {
				cmakeBuild();
			}
		}
		stage('Pack') {
			steps {
				doPack();
			}
		}
		stage('Integration Tests') {
			when {
				expression {
					return params.IntegrationTests
				}
			}
			steps {
				doIntegrationTests();
			}
		}
		stage('Deploy') {
			when {
				expression {
					return params.Deploy
				}
			}
			steps {
				doDeploy();
			}
		}
		stage('Upload') {
			when {
				expression {
					return params.Upload
				}
			}
			steps {
				doUpload();
			}
		}
	}
}

def genericSh(cmd)
{
	if (isUnix())
	{
		sh cmd
	}
	else
	{
		bat cmd
	}
}

def hasLabel(String label)
{
    def res = false
    
    env.NODE_LABELS.split(' ').each
    { l ->
        if (l.equals(label))
        {
            res = true
        }
    }

    return res
}

def formatArg(_arg)
{
	if(isUnix())
		return '$' + _arg
	else
		return '%' + _arg + '%'
}

def deleteFile(name)
{
	if(isUnix())
		sh "rm -f ${name}"
	else
		bat "del ${name}"
}

def needsJuce()
{
	return "on"
}
def buildFxPlugins()
{
	return params.FXPlugins ? 'on' : 'off'
}
def cmakeBuildDir()
{
	return "${CMAKE_BUILD_DIR}_${params.Branch}"
}

def doCheckout()
{
	checkout(
		[$class: 'GitSCM'
		, branches: [[name: "*/${params.Branch}"]]
		, extensions: [
			[$class: 'SubmoduleOption'
			, disableSubmodules: false
			, parentCredentials: false
			, recursiveSubmodules: true
			, reference: ''
			, trackingSubmodules: false]]
			, userRemoteConfigs: [[ url: GIT_URL ]]
		]
	)
}

def getSynths()
{
    def synths =
         "-Dgearmulator_SYNTH_OSIRUS=" + (params.SynthOsirus ? "on" : "off") +
        " -Dgearmulator_SYNTH_OSTIRUS=" + (params.SynthOsTIrus ? "on" : "off") +
        " -Dgearmulator_SYNTH_VAVRA=" + (params.SynthVavra ? "on" : "off") +
        " -Dgearmulator_SYNTH_XENIA=" + (params.SynthXenia ? "on" : "off") +
        " -Dgearmulator_SYNTH_NODALRED2X=" + (params.SynthNodalRed2x ? "on" : "off")
    
    return synths
}

def cmakeBuild()
{
    def buildDir = cmakeBuildDir()
    def synths = getSynths()
    def juce = needsJuce()
    def fx = buildFxPlugins()

	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
    	genericSh "cmake -Dgearmulator_SOURCE_DIR=../ -Dgearmulator_BINARY_DIR=../${buildDir} -Dgearmulator_BUILD_JUCEPLUGIN=${juce} -Dgearmulator_BUILD_FX_PLUGIN=${fx} -DCMAKE_BUILD_TYPE=Release ${synths} -P scripts/generate.cmake"
	}

    def parallel = 2;
    
    if(hasLabel("win")) {
        parallel = 12;
    } else if(hasLabel("m2")) {
        parallel = 6;
    } else if(hasLabel("pi5")) {
		paraellel = 2;
	}
	
	genericSh "cmake --build ${buildDir} --config Release --parallel ${parallel}"
}

def doIntegrationTests()
{
	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
    	dir(cmakeBuildDir()) {
    		genericSh "ctest -C Release -VV --output-on-failure"
    	}
	}
}

def doPack()
{
	dir(cmakeBuildDir()) {
		genericSh 'cmake -P ../../scripts/pack.cmake'
	}
}

def copyArtefacts(local, remote)
{
    def buildDir = cmakeBuildDir()
    def synths = getSynths()
    
	withCredentials([file(credentialsId: 'rclone_dsp56300_conf', variable: 'RCLONE_CONF')]) {
		genericSh "cmake -Dgearmulator_BINARY_DIR=${buildDir} -DUPLOAD_LOCAL=${local} -DUPLOAD_REMOTE=${remote} -DFOLDER=${params.UploadFolder} ${synths} -P scripts/deployAll.cmake"
	}
}

def doDeploy()
{
	copyArtefacts(1,0)
}

def doUpload()
{
	copyArtefacts(0,1)
}
