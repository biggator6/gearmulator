pipeline {
	agent any
	parameters
	{
		booleanParam(name: 'LinuxARM', defaultValue: true, description: '') 
		booleanParam(name: 'LinuxX86', defaultValue: true, description: '') 
		booleanParam(name: 'Win', defaultValue: true, description: '') 
		booleanParam(name: 'Mac', defaultValue: true, description: '')
		choice(name: 'Branch', choices: ['main'], description: '')
		booleanParam(name: 'FXPlugins', defaultValue: true, description: '')
		booleanParam(name: 'IntegrationTests', defaultValue: true, description: '')
		booleanParam(name: 'Deploy', defaultValue: false, description: '')
		booleanParam(name: 'Upload', defaultValue: false, description: '')
		choice(name: 'UploadFolder', choices: ['internal', '', 'alpha', 'beta', 'donators', ''], description: '')
		booleanParam(name: 'SynthOsirus', defaultValue: true, description: '')
		booleanParam(name: 'SynthOsTIrus', defaultValue: true, description: '')
		booleanParam(name: 'SynthVavra', defaultValue: true, description: '')
		booleanParam(name: 'SynthXenia', defaultValue: true, description: '')
		booleanParam(name: 'SynthNodalRed2x', defaultValue: false, description: '')
	}
	stages {
		stage('Prepare') {
			steps {
				script {
					currentBuild.displayName += " - ${params.Branch} -"

					if(params.LinuxARM)					currentBuild.displayName += " La"
					if(params.LinuxX86)					currentBuild.displayName += " Lx"
					if(params.Mac)						currentBuild.displayName += " M"
					if(params.Win)						currentBuild.displayName += " W"
					if(params.FXPlugins)				currentBuild.displayName += " FX"
					if(params.IntegrationTests)			currentBuild.displayName += " i"
					if(params.Deploy)					currentBuild.displayName += " d"
					if(params.Upload)					currentBuild.displayName += " u"
					if(params.SynthOsirus)			    currentBuild.displayName += " Sabc"
					if(params.SynthOsTIrus)			    currentBuild.displayName += " Sti"
					if(params.SynthVavra)			    currentBuild.displayName += " SmQ"
					if(params.SynthXenia)			    currentBuild.displayName += " Sxt"
					if(params.SynthNodalRed2x)		    currentBuild.displayName += " Sn2x"

					currentBuild.description = "Integration Tests: ${params.IntegrationTests}\nDeploy: ${params.Deploy}"
				}
			}
		}
		stage('Parallel Build') {
			parallel {
				stage('Windows') {
					when { expression { return params.Win } }
					steps {
						startBuildJob('win')
					}
				}
				stage('Mac') {
					when { expression { return params.Mac } }
					steps {
						startBuildJob('mac')
					}
				}
				stage('Linux aarch64') {
					when { expression { return params.LinuxARM } }
					steps {
						startBuildJob('linux && arm')
					}
				}
				stage('Linux x86') {
					when { expression { return params.LinuxX86 } }
					steps {
						startBuildJob('linux && x86')
					}
				}
			}
		}
	}
	post {
		always {
			mqttNotification(
				brokerUrl: "${env.MQTT_URL}",
				credentialsId: 'mqtt',
				message: currentBuild.displayName + ' - ' + currentBuild.currentResult)
		}
	}
}

def startBuildJob(label)
{
	build job: 'dsp56300_main', parameters:
	[
		[$class: 'StringParameterValue', name: 'AgentLabel', value: "${label}"], 
		[$class: 'StringParameterValue', name: 'Branch', value: params.Branch], 
		[$class: 'BooleanParameterValue', name: 'Deploy', value: params.Deploy], 
		[$class: 'BooleanParameterValue', name: 'Upload', value: params.Upload], 
		[$class: 'BooleanParameterValue', name: 'IntegrationTests', value: params.IntegrationTests],
		[$class: 'BooleanParameterValue', name: 'FXPlugins', value: params.FXPlugins],
		[$class: 'StringParameterValue', name: 'UploadFolder', value: params.UploadFolder], 
		[$class: 'BooleanParameterValue', name: 'SynthOsirus', value: params.SynthOsirus],
		[$class: 'BooleanParameterValue', name: 'SynthOsTIrus', value: params.SynthOsTIrus],
		[$class: 'BooleanParameterValue', name: 'SynthVavra', value: params.SynthVavra],
		[$class: 'BooleanParameterValue', name: 'SynthXenia', value: params.SynthXenia],
		[$class: 'BooleanParameterValue', name: 'SynthNodalRed2x', value: params.SynthNodalRed2x],
	]
}
